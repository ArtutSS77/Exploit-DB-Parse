version: '3'

services:
  database:
    container_name: ${DATABASE_SERVICE_NAME}
    restart: always
    image: postgres:latest
    environment:
      POSTGRES_USER: ${DATABASE_ORIGIN_USER}
      POSTGRES_PASSWORD: ${DATABASE_ORIGIN_PASS}
      POSTGRES_DB: ${DATABASE_NAME}
    volumes:
      - db_volume:/var/lib/postgresql/data
    expose:
      - ${DATABASE_PORT}

  backend:
    container_name: ${BACKEND_SERVICE_NAME}
    restart: always
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    env_file: .env
    volumes:
      - ./parser_backend:/code:cached
      - statics_volume:/code/static
    depends_on:
      - database
    expose:
      - ${BACKEND_PORT}
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    command: gunicorn -c gunicorn.py backend.asgi:application -k uvicorn.workers.UvicornWorker
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}

  bot:
    container_name: ${BOT_SERVICE_NAME}
    restart: always
    build:
      context: .
      dockerfile: docker/bot.Dockerfile
    env_file: .env
    depends_on:
      - backend
    expose:
      - ${BOT_PORT}

  celery-broker:
    container_name: ${BROKER_SERVICE_NAME}
    restart: always
    build:
      context: .
      dockerfile: docker/celery_broker.Dockerfile
    expose:
      - ${BROKER_PORT}
    command: redis-server /usr/local/etc/redis/redis.conf

  celery-worker:
    container_name: ${CELERY_SERVICE_NAME}
    restart: always
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    env_file: .env
    volumes:
      - ./parser_backend:/code:cached
    depends_on:
      - celery-broker
    # expose:
    # #   - ${BACKEND_PORT}
    command:
    - celery
    - --app
    - backend
    - worker
    - --loglevel=DEBUG
    - -E
    - --logfile=celery.log

  celery-beat:
    container_name: ${CELERY_BEAT_SERVICE_NAME}
    restart: always
    build:
      context: .
      dockerfile: docker/backend.Dockerfile
    env_file: .env
    volumes:
      - ./parser_backend:/code:cached
    depends_on:
      - celery-broker
      - celery-worker
    # expose:
    #   - ${BACKEND_PORT}
    command:
    - celery
    - --app
    - backend
    - beat
    - --loglevel=DEBUG
    - -S
    - django

volumes:
  db_volume:
  statics_volume:
